

    // connection.doInput = true : No es obligatorio para operaciones de lectura.

    // val response = connection.inputStream.read().toString() :No me ha funcionado.

    // comprobar conexion
        val responseCode = connection.responseCode
        if (responseCode == HttpURLConnection.HTTP_OK) {
            val response = readStream (connection.inputStream)
            Log.i("HTTP", "Respuesta: ${response.toString()}")
            val responseObject: JSONObject = JSONObject(response.toString())
                //result = responseObject.getJSONObject("data").getString("horoscope_data")
            } else {
                Log.i("HTTP", "Error en la solicitud. Código de respuesta: $responseCode")
            }

    // Boton search
        // Definido en  override fun onCreateOptionsMenu
        initSearchView(menu?.findItem(R.id.menu_search))

        // Definido dentro del activity
        private fun initSearchView(searchItem: MenuItem?) {
               if (searchItem != null) {
                   var searchView = searchItem.actionView as SearchView

                   searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
                       override fun onQueryTextSubmit(query: String?): Boolean {
                           return false
                       }

                       override fun onQueryTextChange(query: String?): Boolean {
                           if (query.isNullOrEmpty()) {
                               horoscopeList = HoroscopeProvider().getHoroscopes()
                           } else {
                               horoscopeList = HoroscopeProvider().getHoroscopes()
                                   .filter { getString(it.name).contains(query, true) }
                           }
                           horocopeAdapter.updateData(horoscopeList)
                           return true
                       }
                   })
               }
        }

        // Dialogo emergente

        val builder: AlertDialog.Builder = AlertDialog.Builder(context)
        builder
            .setMessage("I am the message")
            .setTitle("I am the title")

        val dialog: AlertDialog = builder.create()
        dialog.show()

        // Dialogo con botones.
        val builder: AlertDialog.Builder = AlertDialog.Builder(context)
        builder
            .setMessage("I am the message")
            .setTitle("I am the title")
            .setPositiveButton("Positive") { dialog, which ->
                // Do something.
            }
            .setNegativeButton("Negative") { dialog, which ->
                // Do something else.
            }

        val dialog: AlertDialog = builder.create()
        dialog.show()


        !-- android:background="@drawable/selector_heart" -->